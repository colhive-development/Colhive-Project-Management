generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified Boolean?
  isCompany     Boolean
  companyCode   String
  password      String?
  image         String?
  setUP         Boolean?  @default(false)
  accounts      Account[] @relation(name: "account")
  sessions      Session[] @relation(name: "session")

  organisation String?
  role         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subprojectIds String[]     @db.ObjectId
  subprojects   SubProject[] @relation(name: "SubMember", fields: [subprojectIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(name: "account", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(name: "session", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String?
  expires    DateTime?
  userID     String?

  @@unique([identifier, token])
}

model Project {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String

  subProjects SubProject[] @relation(name: "subProject")
}

model SubProject {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String

  admin     String   @db.ObjectId
  memberIDs String[] @db.ObjectId
  members   User[]   @relation(name: "SubMember", fields: [memberIDs], references: [id])

  projectID String  @db.ObjectId
  project   Project @relation(name: "subProject", fields: [projectID], references: [id], onDelete: Cascade)
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}
